{% extends "base.njk" %}
{% block content %}
  <section class="section">
    <div class="container">
      <div class="columns is-centered">
        <div class="column is-8">
          <div>
            <h1 class="title is-1" style="color: white;">The waiting game..</h1>
            <p class="mb-5" style="color: white;">Time to pencil yourself in...</p>
            <div style="position: relative; display: inline-block;">
              <canvas id="drawing-canvas" width="800" height="500" style="border: 2px solid #ddd; cursor: none; display: block; background-color: white;"></canvas>
              <canvas id="cursor-canvas" width="800" height="500" style="position: absolute; top: 0; left: 0; pointer-events: none;"></canvas>
            </div>
            <div class="buttons is-centered mt-4">
              <button class="button is-warning" id="clear-btn">
                <span class="icon">
                  <i class="fas fa-eraser"></i>
                </span>
                <span>Clear Canvas</span>
              </button>
              <button class="button is-info" id="color-btn">
                <span class="icon">
                  <i class="fas fa-palette"></i>
                </span>
                <span>Change Color</span>
              </button>
              <button class="button is-link" id="send-artwork-btn">
                <span class="icon">
                  <i class="fas fa-paper-plane"></i>
                </span>
                <span>Send in your artwork</span>
              </button>
            </div>
            <div id="artwork-note" class="notification is-success is-light mt-3" style="display: none;">
              <button class="delete" id="artwork-note-close"></button>
              Thanks! We will look at your artworks.
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
  <script>
    const canvas = document.getElementById('drawing-canvas');
    const ctx = canvas.getContext('2d');
    const cursorCanvas = document.getElementById('cursor-canvas');
    const cursorCtx = cursorCanvas.getContext('2d');
    const colors = [
      '#704CD3',
      '#9B7FD9',
      '#FF6B6B',
      '#4ECDC4',
      '#45B7D1',
      '#FFA07A',
      '#98D8C8',
      '#F7DC6F'
    ];
    let currentColor = colors[0];
    let isDrawing = false;
    let lastX = 0;
    let lastY = 0;
    // Hamaki logo as cursor
    const hamakiLogo = new Image();
    hamakiLogo.src = '/images/hamaki-logo.svg';
    function drawCursor(x, y) {
      cursorCtx.clearRect(0, 0, cursorCanvas.width, cursorCanvas.height);
      cursorCtx.save();
      cursorCtx.translate(x, y);
      cursorCtx.rotate(-Math.PI / 4);
      cursorCtx.drawImage(hamakiLogo, -15, -15, 30, 30);
      cursorCtx.restore();
    }
    canvas.addEventListener('mousedown', (e) => {
      isDrawing = true;
      const rect = canvas.getBoundingClientRect();
      lastX = e.clientX - rect.left;
      lastY = e.clientY - rect.top;
    });
    canvas.addEventListener('mousemove', (e) => {
      const rect = canvas.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      drawCursor(x, y);
      if (isDrawing) {
        ctx.strokeStyle = currentColor;
        ctx.lineWidth = 3;
        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';
        ctx.beginPath();
        ctx.moveTo(lastX, lastY);
        ctx.lineTo(x, y);
        ctx.stroke();
        lastX = x;
        lastY = y;
      }
    });
    canvas.addEventListener('mouseup', () => {
      isDrawing = false;
    });
    canvas.addEventListener('mouseleave', () => {
      isDrawing = false;
      cursorCtx.clearRect(0, 0, cursorCanvas.width, cursorCanvas.height);
    });
    document.getElementById('clear-btn').addEventListener('click', () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
    });
    document.getElementById('color-btn').addEventListener('click', () => {
      const currentIndex = colors.indexOf(currentColor);
      currentColor = colors[(currentIndex + 1) % colors.length];
    });
    // Send artwork: export canvas as PNG and upload
    const sendBtn = document.getElementById('send-artwork-btn');
    const note = document.getElementById('artwork-note');
    const noteClose = document.getElementById('artwork-note-close');
    sendBtn.addEventListener('click', () => {
      canvas.toBlob(async (blob) => {
        if (!blob) {
          note.textContent = 'Could not capture your artwork.';
          note.classList.remove('is-success');
          note.classList.add('is-danger');
          note.style.display = 'block';
          return;
        }
        const formData = new FormData();
        const pngBlob = blob.type === 'image/png'
          ? blob
          : new Blob([blob], {type: 'image/png'});
        formData.append('artwork', pngBlob, 'artwork.png');
        try {
          const resp = await fetch('/local/artworks/upload', {
            method: 'POST',
            body: formData
          });
          if (! resp.ok) {
            throw new Error('Upload failed');
          }
          note.textContent = 'Thanks! We will look at your artworks.';
          note.classList.remove('is-danger');
          note.classList.add('is-success');
          note.style.display = 'block';
        } catch (e) {
          note.textContent = 'Upload failed. Please try again.';
          note.classList.remove('is-success');
          note.classList.add('is-danger');
          note.style.display = 'block';
        }
      }, 'image/png');
    });
    noteClose.addEventListener('click', () => {
      note.style.display = 'none';
    });
  </script>
{% endblock %}