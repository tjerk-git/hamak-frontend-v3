{% extends "base.njk" %}
{% block content %}
  <section class="section">
    <div class="container">
      <div class="columns is-centered">
        <div class="column is-10">
          <div>
            {% set hasAvailableSpots = false %}
            {% for group in groupedSpots %}
              {% for spot in group.spots %}
                {% if not spot.isReserved %}
                  {% set hasAvailableSpots = true %}
                {% endif %}
              {% endfor %}
            {% endfor %}
            {% if groupedSpots %}
              {% if not hasAvailableSpots %}
                <div class="notification is-warning">
                  <p class="mb-3">
                    <strong>All spots are currently reserved!</strong>
                  </p>
                  <div class="buttons">
                    <button class="button is-primary" id="join-waitlist-btn">
                      <span class="icon">
                        <i class="fas fa-list"></i>
                      </span>
                      <span>Join the Waiting List</span>
                    </button>
                    <a href="/404" class="button is-info">
                      <span class="icon">
                        <i class="fas fa-gamepad"></i>
                      </span>
                      <span>Or Play the Waiting Game</span>
                    </a>
                  </div>
                </div>
              {% endif %}
              <h1 class="title is-2">{{ calendar.name }}</h1>
              <p class="subtitle is-5">{{ calendar.description }}</p>
              <p class="mb-4">
                <strong>Timezone:</strong>
                {{ calendar.owner.timezone }}</p>
              <div id="spots-container">
                {% for group in groupedSpots %}
                  <div>
                    <h3 class="spot-date" data-date="{{ group.day }}">{{ group.day }}</h3>
                    <div>
                      {% for spot in group.spots %}
                        <div>
                          <p class="spot-time" data-time="{{ spot.startDate }}" data-end-time="{{ spot.endDate }}"></p>
                          {% if spot.isReserved %}
                            <p>Reserved</p>
                          {% else %}
                            <a href="/reserve/{{ spot.spotId }}?startDate={{ spot.startDate }}&endDate={{ spot.endDate }}&timezone={{ calendar.owner.timezone }}&location={{ calendar.name }}">
                              Available</a>
                          {% endif %}
                        </div>
                      {% endfor %}
                    </div>
                  </div>
                {% endfor %}
              </div>
            {% endif %}
          </div>
        </div>
      </div>
    </div>
  </section>
  <!-- Waiting List Modal -->
  <div class="modal" id="waitlist-modal">
    <div class="modal-background"></div>
    <div class="modal-card">
      <header class="modal-card-head">
        <p class="modal-card-title">Join the Waiting List</p>
        <button class="delete" aria-label="close" id="close-waitlist-modal"></button>
      </header>
      <section class="modal-card-body">
        <div id="waitlist-error" class="notification is-danger" style="display: none;">
          <p id="waitlist-error-text"></p>
        </div>
        <div id="waitlist-success" class="notification is-success" style="display: none;">
          <p id="waitlist-success-text"></p>
        </div>
        <form id="waitlist-form">
          <input type="hidden" name="calendarURL" value="{{ calendar.url }}">
          <input type="hidden" name="timezone" id="waitlist-timezone">
          <div class="field">
            <label class="label">Name</label>
            <div class="control has-icons-left">
              <input class="input" type="text" name="visitorName" id="waitlist-name" required minlength="2">
              <span class="icon is-small is-left">
                <i class="fas fa-user"></i>
              </span>
            </div>
          </div>
          <div class="field">
            <label class="label">Email</label>
            <div class="control has-icons-left">
              <input class="input" type="email" name="visitorEmail" id="waitlist-email" required>
              <span class="icon is-small is-left">
                <i class="fas fa-envelope"></i>
              </span>
            </div>
          </div>
          <div class="field">
            <label class="label">Preferred Date (optional)</label>
            <div class="control has-icons-left">
              <input class="input" type="date" name="date" id="waitlist-date">
              <span class="icon is-small is-left">
                <i class="fas fa-calendar"></i>
              </span>
            </div>
          </div>
          <div class="field">
            <label class="label">Comment (optional)</label>
            <div class="control">
              <textarea class="textarea" name="comment" id="waitlist-comment" rows="3"></textarea>
            </div>
          </div>
        </form>
      </section>
      <footer class="modal-card-foot">
        <button class="button is-primary" id="submit-waitlist">Join Waiting List</button>
        <button class="button" id="cancel-waitlist">Cancel</button>
      </footer>
    </div>
  </div>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.43/moment-timezone-with-data.min.js"></script>
  <script>
    document.querySelectorAll('.spot-date').forEach(el => {
      const dateStr = el.getAttribute('data-date');
      const formatted = moment(dateStr).format('dddd, MMMM D, YYYY');
      el.textContent = formatted;
    });
    document.querySelectorAll('.spot-time').forEach(el => {
      const startStr = el.getAttribute('data-time');
      const endStr = el.getAttribute('data-end-time');
      const startFormatted = moment(startStr).format('h:mm A');
      const endFormatted = moment(endStr).format('h:mm A');
      el.textContent = `${startFormatted} - ${endFormatted}`;
    });

    // Set timezone in hidden field
    const waitlistTimezoneField = document.getElementById('waitlist-timezone');
    if (waitlistTimezoneField) {
      waitlistTimezoneField.value = moment.tz.guess();
    }

    // Waiting list modal functionality
    const waitlistModal = document.getElementById('waitlist-modal');
    const joinWaitlistBtn = document.getElementById('join-waitlist-btn');
    const closeWaitlistModal = document.getElementById('close-waitlist-modal');
    const cancelWaitlist = document.getElementById('cancel-waitlist');
    const submitWaitlist = document.getElementById('submit-waitlist');
    const waitlistForm = document.getElementById('waitlist-form');
    const waitlistError = document.getElementById('waitlist-error');
    const waitlistErrorText = document.getElementById('waitlist-error-text');
    const waitlistSuccess = document.getElementById('waitlist-success');
    const waitlistSuccessText = document.getElementById('waitlist-success-text');

    if (joinWaitlistBtn) {
      joinWaitlistBtn.addEventListener('click', () => {
        waitlistModal.classList.add('is-active');
      });
    }

    closeWaitlistModal.addEventListener('click', () => {
      waitlistModal.classList.remove('is-active');
    });

    cancelWaitlist.addEventListener('click', () => {
      waitlistModal.classList.remove('is-active');
    });

    waitlistModal.querySelector('.modal-background').addEventListener('click', () => {
      waitlistModal.classList.remove('is-active');
    });

    submitWaitlist.addEventListener('click', async () => {
      waitlistError.style.display = 'none';
      waitlistSuccess.style.display = 'none';

      const formData = new FormData(waitlistForm);
      const visitorName = formData.get('visitorName');
      const visitorEmail = formData.get('visitorEmail');
      const date = formData.get('date');
      const comment = formData.get('comment');
      const calendarURL = formData.get('calendarURL');
      const timezone = formData.get('timezone');

      if (!visitorName || visitorName.trim().length < 2) {
        waitlistErrorText.textContent = 'Name must be at least 2 characters long';
        waitlistError.style.display = 'block';
        return;
      }

      if (!visitorEmail || !visitorEmail.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)) {
        waitlistErrorText.textContent = 'Please enter a valid email address';
        waitlistError.style.display = 'block';
        return;
      }

      const requestBody = {
        calendarURL,
        visitorName: visitorName.trim(),
        visitorEmail: visitorEmail.trim(),
        timezone,
        ...(date && { date }),
        ...(comment && { comment: comment.trim() })
      };

      try {
        const response = await fetch('/local/waitlist/join', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(requestBody)
        });

        if (response.ok) {
          waitlistForm.style.display = 'none';
          submitWaitlist.style.display = 'none';
          cancelWaitlist.textContent = 'Close';
          waitlistSuccessText.innerHTML = '<strong>Success!</strong> You\'ve been added to the waiting list. We\'ll notify you when a spot becomes available.';
          waitlistSuccess.style.display = 'block';

          setTimeout(() => {
            waitlistModal.classList.remove('is-active');
            waitlistForm.reset();
            waitlistForm.style.display = 'block';
            submitWaitlist.style.display = 'inline-flex';
            cancelWaitlist.textContent = 'Cancel';
            waitlistSuccess.style.display = 'none';
          }, 3000);
        } else {
          const errorData = await response.json().catch(() => ({}));
          waitlistErrorText.textContent = errorData.message || 'Failed to join waiting list. Please try again.';
          waitlistError.style.display = 'block';
        }
      } catch (error) {
        console.error('Error:', error);
        waitlistErrorText.textContent = 'An error occurred. Please try again.';
        waitlistError.style.display = 'block';
      }
    });
  </script>
{% endblock %}