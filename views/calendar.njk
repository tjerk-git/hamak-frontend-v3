{% extends "base.njk" %}

{% block content %}
<section class="section">
  <div class="container">
    <div class="columns is-centered">
      <div class="column is-10">
        <div class="box">
          <h1 class="title is-2">{{ calendar.name }}</h1>
          <p class="subtitle is-5">{{ calendar.description }}</p>
          <p class="mb-4"><strong>Timezone:</strong> {{ calendar.owner.timezone }}</p>

          {% set hasAvailableSpots = false %}
          {% for date, spots in groupedSpots %}
            {% for spot in spots %}
              {% if not spot.reserved %}
                {% set hasAvailableSpots = true %}
              {% endif %}
            {% endfor %}
          {% endfor %}

          {% if groupedSpots and Object.keys(groupedSpots).length > 0 %}
            {% if not hasAvailableSpots %}
              <div class="notification is-warning">
                <p class="mb-3"><strong>All spots are currently reserved!</strong></p>
                <div class="buttons">
                  <button class="button is-primary">
                    <span class="icon"><i class="fas fa-list"></i></span>
                    <span>Join the Waiting List</span>
                  </button>
                  <button class="button is-info" id="play-game-btn">
                    <span class="icon"><i class="fas fa-gamepad"></i></span>
                    <span>Or Play the Waiting Game</span>
                  </button>
                </div>
              </div>
            {% endif %}

            <div id="spots-container">
              {% for date, spots in groupedSpots %}
                <div class="mb-5">
                  <h3 class="title is-4 spot-date" data-date="{{ date }}">{{ date }}</h3>
                  <div class="columns is-multiline">
                    {% for spot in spots %}
                      <div class="column is-4">
                        <div class="box {% if spot.reserved %}has-background-light{% endif %}">
                          <p class="spot-time" data-time="{{ spot.startTime }}" data-timezone="{{ calendar.owner.timezone }}">
                            {{ spot.startTime }}
                          </p>
                          {% if spot.reserved %}
                            <span class="icon has-text-danger">
                              <i class="fas fa-lock fa-2x"></i>
                            </span>
                            <p class="has-text-grey">Reserved</p>
                          {% else %}
                            <a href="/reserve/{{ spot._id }}">
                              <span class="icon has-text-success">
                                <i class="fas fa-lock-open fa-2x"></i>
                              </span>
                              <p class="has-text-primary">Available</p>
                            </a>
                          {% endif %}
                        </div>
                      </div>
                    {% endfor %}
                  </div>
                </div>
              {% endfor %}
            </div>
          {% else %}
            <div id="game-container">
              <div class="has-text-centered mb-4">
                <p class="mb-3">No spots available yet. While you wait, try our drawing mini-game!</p>
              </div>

              <div style="position: relative; display: inline-block; width: 100%; text-align: center;">
                <canvas id="drawing-canvas" width="800" height="500" style="border: 2px solid #ddd; cursor: none; display: inline-block;"></canvas>
                <canvas id="cursor-canvas" width="800" height="500" style="position: absolute; top: 0; left: 50%; transform: translateX(-50%); pointer-events: none;"></canvas>
              </div>

              <div class="buttons is-centered mt-4">
                <button class="button is-warning" id="clear-btn">
                  <span class="icon"><i class="fas fa-eraser"></i></span>
                  <span>Clear Canvas</span>
                </button>
                <button class="button is-info" id="color-btn">
                  <span class="icon"><i class="fas fa-palette"></i></span>
                  <span>Change Color</span>
                </button>
              </div>
            </div>
          {% endif %}
        </div>
      </div>
    </div>
  </div>
</section>

<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.43/moment-timezone-with-data.min.js"></script>
<script>
  // Format dates and times using moment.js with owner timezone
  const ownerTimezone = '{{ calendar.owner.timezone }}';

  document.querySelectorAll('.spot-date').forEach(el => {
    const dateStr = el.getAttribute('data-date');
    const formatted = moment(dateStr).format('dddd, MMMM D, YYYY');
    el.textContent = formatted;
  });

  document.querySelectorAll('.spot-time').forEach(el => {
    const timeStr = el.getAttribute('data-time');
    const timezone = el.getAttribute('data-timezone');
    const formatted = moment.tz(timeStr, timezone).format('h:mm A');
    el.textContent = formatted;
  });

  // Drawing game functionality
  const canvas = document.getElementById('drawing-canvas');
  const cursorCanvas = document.getElementById('cursor-canvas');

  if (canvas && cursorCanvas) {
    const ctx = canvas.getContext('2d');
    const cursorCtx = cursorCanvas.getContext('2d');

    const colors = ['#704CD3', '#9B7FD9', '#FF6B6B', '#4ECDC4', '#45B7D1', '#FFA07A', '#98D8C8', '#F7DC6F'];
    let currentColor = colors[0];
    let isDrawing = false;
    let lastX = 0;
    let lastY = 0;

    const hamakiLogo = new Image();
    hamakiLogo.src = '/hamaki-logo.png';

    function drawCursor(x, y) {
      cursorCtx.clearRect(0, 0, cursorCanvas.width, cursorCanvas.height);
      cursorCtx.save();
      cursorCtx.translate(x, y);
      cursorCtx.rotate(-Math.PI / 4);
      cursorCtx.drawImage(hamakiLogo, -15, -15, 30, 30);
      cursorCtx.restore();
    }

    canvas.addEventListener('mousedown', (e) => {
      isDrawing = true;
      const rect = canvas.getBoundingClientRect();
      lastX = e.clientX - rect.left;
      lastY = e.clientY - rect.top;
    });

    canvas.addEventListener('mousemove', (e) => {
      const rect = canvas.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;

      drawCursor(x, y);

      if (isDrawing) {
        ctx.strokeStyle = currentColor;
        ctx.lineWidth = 3;
        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';

        ctx.beginPath();
        ctx.moveTo(lastX, lastY);
        ctx.lineTo(x, y);
        ctx.stroke();

        lastX = x;
        lastY = y;
      }
    });

    canvas.addEventListener('mouseup', () => {
      isDrawing = false;
    });

    canvas.addEventListener('mouseleave', () => {
      isDrawing = false;
      cursorCtx.clearRect(0, 0, cursorCanvas.width, cursorCanvas.height);
    });

    document.getElementById('clear-btn').addEventListener('click', () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
    });

    document.getElementById('color-btn').addEventListener('click', () => {
      const currentIndex = colors.indexOf(currentColor);
      currentColor = colors[(currentIndex + 1) % colors.length];
    });
  }

  // Play game button for all reserved scenario
  const playGameBtn = document.getElementById('play-game-btn');
  if (playGameBtn) {
    playGameBtn.addEventListener('click', () => {
      const spotsContainer = document.getElementById('spots-container');
      if (spotsContainer) {
        spotsContainer.innerHTML = `
          <div id="game-container">
            <div class="has-text-centered mb-4">
              <p class="mb-3">While you wait, try our drawing mini-game!</p>
            </div>

            <div style="position: relative; display: inline-block; width: 100%; text-align: center;">
              <canvas id="drawing-canvas" width="800" height="500" style="border: 2px solid #ddd; cursor: none; display: inline-block;"></canvas>
              <canvas id="cursor-canvas" width="800" height="500" style="position: absolute; top: 0; left: 50%; transform: translateX(-50%); pointer-events: none;"></canvas>
            </div>

            <div class="buttons is-centered mt-4">
              <button class="button is-warning" id="clear-btn">
                <span class="icon"><i class="fas fa-eraser"></i></span>
                <span>Clear Canvas</span>
              </button>
              <button class="button is-info" id="color-btn">
                <span class="icon"><i class="fas fa-palette"></i></span>
                <span>Change Color</span>
              </button>
            </div>
          </div>
        `;

        // Re-initialize game
        const canvas = document.getElementById('drawing-canvas');
        const cursorCanvas = document.getElementById('cursor-canvas');
        const ctx = canvas.getContext('2d');
        const cursorCtx = cursorCanvas.getContext('2d');

        const colors = ['#704CD3', '#9B7FD9', '#FF6B6B', '#4ECDC4', '#45B7D1', '#FFA07A', '#98D8C8', '#F7DC6F'];
        let currentColor = colors[0];
        let isDrawing = false;
        let lastX = 0;
        let lastY = 0;

        const hamakiLogo = new Image();
        hamakiLogo.src = '/hamaki-logo.png';

        function drawCursor(x, y) {
          cursorCtx.clearRect(0, 0, cursorCanvas.width, cursorCanvas.height);
          cursorCtx.save();
          cursorCtx.translate(x, y);
          cursorCtx.rotate(-Math.PI / 4);
          cursorCtx.drawImage(hamakiLogo, -15, -15, 30, 30);
          cursorCtx.restore();
        }

        canvas.addEventListener('mousedown', (e) => {
          isDrawing = true;
          const rect = canvas.getBoundingClientRect();
          lastX = e.clientX - rect.left;
          lastY = e.clientY - rect.top;
        });

        canvas.addEventListener('mousemove', (e) => {
          const rect = canvas.getBoundingClientRect();
          const x = e.clientX - rect.left;
          const y = e.clientY - rect.top;

          drawCursor(x, y);

          if (isDrawing) {
            ctx.strokeStyle = currentColor;
            ctx.lineWidth = 3;
            ctx.lineCap = 'round';
            ctx.lineJoin = 'round';

            ctx.beginPath();
            ctx.moveTo(lastX, lastY);
            ctx.lineTo(x, y);
            ctx.stroke();

            lastX = x;
            lastY = y;
          }
        });

        canvas.addEventListener('mouseup', () => {
          isDrawing = false;
        });

        canvas.addEventListener('mouseleave', () => {
          isDrawing = false;
          cursorCtx.clearRect(0, 0, cursorCanvas.width, cursorCanvas.height);
        });

        document.getElementById('clear-btn').addEventListener('click', () => {
          ctx.clearRect(0, 0, canvas.width, canvas.height);
        });

        document.getElementById('color-btn').addEventListener('click', () => {
          const currentIndex = colors.indexOf(currentColor);
          currentColor = colors[(currentIndex + 1) % colors.length];
        });
      }
    });
  }
</script>
{% endblock %}
