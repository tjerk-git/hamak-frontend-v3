{% extends "base.njk" %}

{% block content %}
<section class="section">
  <div class="container">
    <div class="columns is-centered">
      <div class="column is-6">
        <div class="box">
          <h1 class="title is-3">Reserve Your Spot</h1>

          <div class="mb-4">
            <p><strong>Time:</strong> <span id="spot-time">{{ spot.startTime }}</span></p>
            <p><strong>Location:</strong> {{ spot.location }}</p>
            <p><strong>Timezone:</strong> {{ spot.timezone }}</p>
          </div>

          <form id="reservation-form">
            <input type="hidden" name="spotId" value="{{ spot._id }}">
            <input type="hidden" name="timezone" id="timezone-field">

            <div class="field form-field">
              <label class="label">Name (optional)</label>
              <div class="control has-icons-left">
                <input class="input" type="text" name="visitorName" id="visitorName" minlength="2">
                <span class="icon is-small is-left">
                  <i class="fas fa-user"></i>
                </span>
              </div>
            </div>

            <div class="field form-field">
              <label class="label">Email (optional)</label>
              <div class="control has-icons-left">
                <input class="input" type="email" name="visitorEmail" id="visitorEmail">
                <span class="icon is-small is-left">
                  <i class="fas fa-envelope"></i>
                </span>
              </div>
              <p class="help is-danger" id="email-error" style="display: none;">Please enter a valid email address</p>
            </div>

            <div class="field form-field">
              <label class="label">Comment (optional)</label>
              <div class="control">
                <textarea class="textarea" name="comment" id="comment" rows="3"></textarea>
              </div>
            </div>

            <div class="field">
              <div class="control">
                <button type="submit" class="button is-primary is-fullwidth">
                  <span class="icon">
                    <img src="/hamaki-logo.png" alt="Hamaki" style="width: 20px; height: 20px;">
                  </span>
                  <span>Reserve Spot</span>
                </button>
              </div>
            </div>
          </form>

          <div id="success-message" style="display: none; text-align: center;">
            <span class="icon has-text-success">
              <i class="fas fa-check-circle fa-3x"></i>
            </span>
            <h2 class="title is-4 mt-3">Reservation Confirmed!</h2>
            <p>Redirecting...</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.43/moment-timezone-with-data.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"></script>
<script>
  // Cookie functions
  function setCookie(name, value, days) {
    const expires = new Date();
    expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000));
    document.cookie = name + '=' + value + ';expires=' + expires.toUTCString() + ';path=/';
  }

  function getCookie(name) {
    const nameEQ = name + '=';
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) === ' ') c = c.substring(1, c.length);
      if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
  }

  // Load saved form data
  const savedName = getCookie('visitorName');
  const savedEmail = getCookie('visitorEmail');
  if (savedName) document.getElementById('visitorName').value = savedName;
  if (savedEmail) document.getElementById('visitorEmail').value = savedEmail;

  // Set client timezone
  const clientTimezone = moment.tz.guess();
  document.getElementById('timezone-field').value = clientTimezone;

  // Format spot time
  const spotTimeEl = document.getElementById('spot-time');
  const spotTime = '{{ spot.startTime }}';
  const spotTimezone = '{{ spot.timezone }}';
  spotTimeEl.textContent = moment.tz(spotTime, spotTimezone).format('MMMM D, YYYY [at] h:mm A');

  // Confetti function
  function fireConfetti() {
    const duration = 3 * 1000;
    const animationEnd = Date.now() + duration;
    const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };

    function randomInRange(min, max) {
      return Math.random() * (max - min) + min;
    }

    const interval = setInterval(function() {
      const timeLeft = animationEnd - Date.now();

      if (timeLeft <= 0) {
        return clearInterval(interval);
      }

      const particleCount = 50 * (timeLeft / duration);

      confetti(Object.assign({}, defaults, {
        particleCount,
        origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 }
      }));
      confetti(Object.assign({}, defaults, {
        particleCount,
        origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 }
      }));
    }, 250);
  }

  // Form validation and submission
  const form = document.getElementById('reservation-form');
  const emailInput = document.getElementById('visitorEmail');
  const emailError = document.getElementById('email-error');
  const nameInput = document.getElementById('visitorName');

  emailInput.addEventListener('input', () => {
    if (emailInput.value && !emailInput.validity.valid) {
      emailError.style.display = 'block';
    } else {
      emailError.style.display = 'none';
    }
  });

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Validate name length if provided
    if (nameInput.value && nameInput.value.length < 2) {
      alert('Name must be at least 2 characters long');
      return;
    }

    // Validate email format if provided
    if (emailInput.value && !emailInput.validity.valid) {
      emailError.style.display = 'block';
      return;
    }

    // Save to cookies
    if (nameInput.value) setCookie('visitorName', nameInput.value, 365);
    if (emailInput.value) setCookie('visitorEmail', emailInput.value, 365);

    // Submit form
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());

    try {
      const response = await fetch('/local/reservation/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });

      if (response.ok) {
        const result = await response.json();

        // Fire confetti
        fireConfetti();

        // Slide up form fields
        const formFields = document.querySelectorAll('.form-field');
        formFields.forEach((field, index) => {
          setTimeout(() => {
            field.style.transition = 'all 0.5s ease';
            field.style.transform = 'translateY(-100%)';
            field.style.opacity = '0';
          }, index * 100);
        });

        // Hide form and show success message
        setTimeout(() => {
          form.style.display = 'none';
          document.getElementById('success-message').style.display = 'block';

          // Redirect after 2 seconds
          setTimeout(() => {
            window.location.href = '/reservation/' + result.reservationId;
          }, 2000);
        }, 500);
      } else {
        alert('Failed to create reservation. Please try again.');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('An error occurred. Please try again.');
    }
  });
</script>
{% endblock %}
